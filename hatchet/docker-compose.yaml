services:
  postgres:
    container_name: postgres
    image: postgres:latest
    command: postgres -c 'max_connections=200'
    restart: always
    hostname: postgres
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: hatchet
    ports:
      - 5435:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "hatchet"]
      interval: s
      timeout: 10s
      retries: 5
      start_period: 10s

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: dev
      RABBITMQ_DEFAULT_PASS: dev
    ports:
      - 5673:5672 # RabbitMQ
      - 15673:15672 # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf # Configuration file mount
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  migration:
    container_name: migration
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://dev:dev@postgres:5432/hatchet

  setup_config:
    container_name: setup_config
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
    depends_on:
      migration:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://dev:dev@postgres:5432/hatchet
      DATABASE_POSTGRES_PORT: 5432
      DATABASE_POSTGRES_HOST: postgres
      SERVER_TASKQUEUE_RABBITMQ_URL: amqp://dev:dev@rabbitmq:5672/
      SERVER_AUTH_COOKIE_DOMAIN: localhost:8080
      SERVER_AUTH_COOKIE_INSECURE: t
      SERVER_GRPC_BIND_ADDRESS: 0.0.0.0
      SERVER_GRPC_INSECURE: t
      SERVER_GRPC_BROADCAST_ADDRESS: localhost:7077
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    volumes:
      - certs:/hatchet/certs
      - config:/hatchet/config

  hatchet_engine:
    container_name: hatchet_engine
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:latest
    restart: on-failure
    depends_on:
      setup_config:
        condition: service_completed_successfully
      migration:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgres://dev:dev@postgres:5432/hatchet
      SERVER_GRPC_BIND_ADDRESS: 0.0.0.0
      SERVER_GRPC_INSECURE: t
    command: /hatchet/hatchet-engine --config /hatchet/config
    ports:
      - 7077:7070
    volumes:
      - certs:/hatchet/certs
      - config:/hatchet/config

  hatchet_api:
    container_name: hatchet_api
    image: ghcr.io/hatchet-dev/hatchet/hatchet-api:latest
    restart: on-failure
    depends_on:
      setup_config:
        condition: service_completed_successfully
      migration:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgres://dev:dev@postgres:5432/hatchet
    command: /hatchet/hatchet-api --config /hatchet/config
    volumes:
      - certs:/hatchet/certs
      - config:/hatchet/config

  hatchet_frontend:
    container_name: hatchet_frontend
    image: ghcr.io/hatchet-dev/hatchet/hatchet-frontend:latest

  caddy:
    container_name: caddy
    image: caddy:latest
    ports:
      - 8080:8080
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile

# Default User
# Email: admin@example.com
# Password: Admin123!!

volumes:
  postgres_data:
  rabbitmq_data:
  rabbitmq.conf:
  config:
  certs:
